use phoron_asm::lexer::{
    Lexer,
    Token::{self, *},
};

use std::{error::Error, fs, path::Path};

fn lex<P>(testfile: P) -> Result<Vec<Token>, Box<dyn Error>>
where
    P: AsRef<Path> + Copy,
{
    let src = fs::read_to_string(testfile)?;
    let mut lexer = Lexer::new(&testfile.as_ref().to_str().unwrap(), &src);
    let mut tokens = Vec::new();

    loop {
        let tok = lexer.lex()?;
        if tok == Token::TEof {
            break;
        }

        tokens.push(tok);
    }

    Ok(tokens)
}

#[test]
fn test_lex_malign() -> Result<(), Box<dyn Error>> {
    let expected_tokens = vec![
        TClass,
        TPublic,
        TIdent("Malign".to_string()),
        TSuper,
        TIdent("java/lang/Object".to_string()),
        TMethod,
        TPublic,
        TIdent("<init>".to_string()),
        TLeftParen,
        TRightParen,
        TIdent("V".to_string()),
        TAload0,
        TInvokespecial,
        TIdent("java/lang/Object/<init>".to_string()),
        TLeftParen,
        TRightParen,
        TIdent("V".to_string()),
        TReturn,
        TEnd,
        TEndMethod,
        TMethod,
        TPublic,
        TStatic,
        TIdent("main".to_string()),
        TLeftParen,
        TIdent("[Ljava/lang/String;".to_string()),
        TRightParen,
        TIdent("V".to_string()),
        TLimit,
        TStack,
        TInt(2),
        TLimit,
        TLocals,
        TInt(1),
        TBipush,
        TInt(100),
        TInvokevirtual,
        TIdent("java/lang/Object/clone".to_string()),
        TLeftParen,
        TRightParen,
        TIdent("Ljava/lang/Object;".to_string()),
        TReturn,
        TEnd,
        TEndMethod,
    ];

    let actual_tokens = lex(Path::new("doc/grammar/Malign.pho"))?;
    assert_eq!(expected_tokens, actual_tokens);

    Ok(())
}

#[test]
fn test_lex_fields() -> Result<(), Box<dyn Error>> {
    let expected_tokens = vec![
        TClass,
        TPublic,
        TIdent("FieldsDemo".to_string().to_string()),
        TSuper,
        TIdent("java/lang/Object".to_string().to_string()),
        TField,
        TPrivate,
        TIdent("x".to_string().to_string()),
        TIdent("I".to_string().to_string()),
        TField,
        TPrivate,
        TIdent("y".to_string()),
        TIdent("D".to_string()),
        TField,
        TPrivate,
        TIdent("z".to_string()),
        TIdent("Ljava/lang/String;".to_string()),
        TAssign,
        TString("Foo".to_string()),
        TField,
        TPublic,
        TStatic,
        TFinal,
        TIdent("PI".to_string()),
        TIdent("F".to_string()),
        TAssign,
        TFloat(3.14159),
        TMethod,
        TPublic,
        TIdent("<init>".to_string()),
        TLeftParen,
        TRightParen,
        TIdent("V".to_string()),
        TAload0,
        TInvokespecial,
        TIdent("java/lang/Object/<init>".to_string()),
        TLeftParen,
        TRightParen,
        TIdent("V".to_string()),
        TReturn,
        TEnd,
        TEndMethod,
        TMethod,
        TPublic,
        TStatic,
        TIdent("main".to_string()),
        TLeftParen,
        TIdent("[Ljava/lang/String;".to_string()),
        TRightParen,
        TIdent("V".to_string()),
        TLimit,
        TStack,
        TInt(1),
        TLimit,
        TLocals,
        TInt(1),
        TReturn,
        TEnd,
        TEndMethod,
    ];

    let actual_tokens = lex(Path::new("doc/grammar/FieldsDemo.pho"))?;
    assert_eq!(expected_tokens, actual_tokens);

    Ok(())
}

#[test]
fn test_lex_hola_mundo() -> Result<(), Box<dyn Error>> {
    let expected_tokens = vec![
        TClass,
        TPublic,
        TIdent("HolaMundo".to_string()),
        TSuper,
        TIdent("java/lang/Object".to_string()),
        TMethod,
        TPublic,
        TIdent("<init>".to_string()),
        TLeftParen,
        TRightParen,
        TIdent("V".to_string()),
        TAload0,
        TInvokespecial,
        TIdent("java/lang/Object/<init>".to_string()),
        TLeftParen,
        TRightParen,
        TIdent("V".to_string()),
        TReturn,
        TEnd,
        TEndMethod,
        TMethod,
        TPublic,
        TStatic,
        TIdent("main".to_string()),
        TLeftParen,
        TIdent("[Ljava/lang/String;".to_string()),
        TRightParen,
        TIdent("V".to_string()),
        TLimit,
        TStack,
        TInt(2),
        TGetstatic,
        TIdent("java/lang/System/out".to_string()),
        TIdent("Ljava/io/PrintStream;".to_string()),
        TLdc,
        TString("Hola, Mundo!".to_string()),
        TInvokevirtual,
        TIdent("java/io/PrintStream/println".to_string()),
        TLeftParen,
        TIdent("Ljava/lang/String;".to_string()),
        TRightParen,
        TIdent("V".to_string()),
        TReturn,
        TEnd,
        TEndMethod,
    ];

    let actual_tokens = lex(Path::new("doc/grammar/HolaMundo.pho"))?;
    assert_eq!(expected_tokens, actual_tokens);

    Ok(())
}

#[test]
fn test_lex_hello_world() -> Result<(), Box<dyn Error>> {
    let expected_tokens = vec![
        TClass,
        TPublic,
        TIdent("HelloWorld".to_string()),
        TSuper,
        TIdent("java/lang/Object".to_string()),
        TMethod,
        TPublic,
        TIdent("<init>".to_string()),
        TLeftParen,
        TRightParen,
        TIdent("V".to_string()),
        TAload0,
        TInvokespecial,
        TIdent("java/lang/Object/<init>".to_string()),
        TLeftParen,
        TRightParen,
        TIdent("V".to_string()),
        TReturn,
        TEnd,
        TEndMethod,
        TMethod,
        TPublic,
        TStatic,
        TIdent("main".to_string()),
        TLeftParen,
        TIdent("[Ljava/lang/String;".to_string()),
        TRightParen,
        TIdent("V".to_string()),
        TLimit,
        TStack,
        TInt(2),
        TGetstatic,
        TIdent("java/lang/System/out".to_string()),
        TIdent("Ljava/io/PrintStream;".to_string()),
        TLdc,
        TString("Hello, world".to_string()),
        TInvokevirtual,
        TIdent("java/io/PrintStream/println".to_string()),
        TLeftParen,
        TIdent("Ljava/lang/String;".to_string()),
        TRightParen,
        TIdent("V".to_string()),
        TReturn,
        TEnd,
        TEndMethod,
    ];

    let actual_tokens = lex(Path::new("doc/grammar/HelloWorld.pho"))?;
    assert_eq!(expected_tokens, actual_tokens);

    Ok(())
}

#[test]
fn test_lex_malign_jasmin() -> Result<(), Box<dyn Error>> {
    let expected_tokens = vec![
        TClass,
        TPublic,
        TIdent("MalignJasmin".to_string().to_string()),
        TSuper,
        TIdent("java/lang/Object".to_string().to_string()),
        TMethod,
        TPublic,
        TIdent("<init>".to_string()),
        TLeftParen,
        TRightParen,
        TIdent("V".to_string()),
        TAload0,
        TInvokespecial,
        TIdent("java/lang/Object/<init>".to_string()),
        TLeftParen,
        TRightParen,
        TIdent("V".to_string()),
        TReturn,
        TEnd,
        TEndMethod,
        TMethod,
        TPublic,
        TStatic,
        TIdent("main".to_string()),
        TLeftParen,
        TIdent("[Ljava/lang/String;".to_string()),
        TRightParen,
        TIdent("V".to_string()),
        TLimit,
        TStack,
        TInt(1),
        TLimit,
        TLocals,
        TInt(1),
        TBipush,
        TInt(100),
        TInvokevirtual,
        TIdent("java/lang/Object/clone".to_string()),
        TLeftParen,
        TRightParen,
        TIdent("Ljava/lang/Object;".to_string()),
        TReturn,
        TEnd,
        TEndMethod,
    ];

    let actual_tokens = lex(Path::new("doc/grammar/MalignJasmin.pho"))?;
    assert_eq!(expected_tokens, actual_tokens);

    Ok(())
}

#[test]
fn test_lex_privet_mir() -> Result<(), Box<dyn Error>> {
    let expected_tokens = vec![
        TClass,
        TPublic,
        TIdent("PrivetMir".to_string()),
        TSuper,
        TIdent("java/lang/Object".to_string()),
        TMethod,
        TPublic,
        TIdent("<init>".to_string()),
        TLeftParen,
        TRightParen,
        TIdent("V".to_string()),
        TAload0,
        TInvokespecial,
        TIdent("java/lang/Object/<init>".to_string()),
        TLeftParen,
        TRightParen,
        TIdent("V".to_string()),
        TReturn,
        TEnd,
        TEndMethod,
        TMethod,
        TPublic,
        TStatic,
        TIdent("main".to_string()),
        TLeftParen,
        TIdent("[Ljava/lang/String;".to_string()),
        TRightParen,
        TIdent("V".to_string()),
        TLimit,
        TStack,
        TInt(2),
        TGetstatic,
        TIdent("java/lang/System/out".to_string()),
        TIdent("Ljava/io/PrintStream;".to_string()),
        TLdc,
        TString("Привет, мир!".to_string()),
        TInvokevirtual,
        TIdent("java/io/PrintStream/println".to_string()),
        TLeftParen,
        TIdent("Ljava/lang/String;".to_string()),
        TRightParen,
        TIdent("V".to_string()),
        TReturn,
        TEnd,
        TEndMethod,
    ];

    let actual_tokens = lex(Path::new("doc/grammar/PrivetMir.pho"))?;
    assert_eq!(expected_tokens, actual_tokens);

    Ok(())
}

#[test]
fn test_lex_areturn() -> Result<(), Box<dyn Error>> {
    let expected_tokens = vec![
        TClass,
        TPublic,
        TIdent("Areturn".to_string()),
        TSuper,
        TIdent("java/lang/Object".to_string()),
        TMethod,
        TPublic,
        TIdent("<init>".to_string()),
        TLeftParen,
        TRightParen,
        TIdent("V".to_string()),
        TAload0,
        TInvokespecial,
        TIdent("java/lang/Object/<init>".to_string()),
        TLeftParen,
        TRightParen,
        TIdent("V".to_string()),
        TReturn,
        TEnd,
        TEndMethod,
        TMethod,
        TPublic,
        TStatic,
        TIdent("makeIntArray".to_string()),
        TLeftParen,
        TIdent("I".to_string()),
        TRightParen,
        TIdent("[I".to_string()),
        TLimit,
        TLocals,
        TInt(2),
        TIload0,
        TNewarray,
        TIdent("int".to_string()),
        TAreturn,
        TEnd,
        TEndMethod,
        TMethod,
        TPublic,
        TStatic,
        TIdent("main".to_string()),
        TLeftParen,
        TIdent("[Ljava/lang/String;".to_string()),
        TRightParen,
        TIdent("V".to_string()),
        TLimit,
        TStack,
        TInt(3),
        TLimit,
        TLocals,
        TInt(3),
        TBipush,
        TInt(10),
        TInvokestatic,
        TIdent("Areturn/makeIntArray".to_string()),
        TLeftParen,
        TIdent("I".to_string()),
        TRightParen,
        TIdent("[I".to_string()),
        TAstore1,
        TReturn,
        TEnd,
        TEndMethod,
    ];

    let actual_tokens = lex(Path::new("doc/grammar/Areturn.pho"))?;
    assert_eq!(expected_tokens, actual_tokens);

    Ok(())
}

#[test]
fn test_lex_create_array_of_threads() -> Result<(), Box<dyn Error>> {
    let expected_tokens = vec![
        TClass,
        TPublic,
        TIdent("CreateArrayOfThreads".to_string()),
        TSuper,
        TIdent("java/lang/Object".to_string()),
        TMethod,
        TPublic,
        TIdent("<init>".to_string()),
        TLeftParen,
        TRightParen,
        TIdent("V".to_string()),
        TAload0,
        TInvokespecial,
        TIdent("java/lang/Object/<init>".to_string()),
        TLeftParen,
        TRightParen,
        TIdent("V".to_string()),
        TReturn,
        TEnd,
        TEndMethod,
        TMethod,
        TPublic,
        TStatic,
        TIdent("main".to_string()),
        TLeftParen,
        TIdent("[Ljava/lang/String;".to_string()),
        TRightParen,
        TIdent("V".to_string()),
        TLimit,
        TStack,
        TInt(3),
        TLimit,
        TLocals,
        TInt(2),
        TBipush,
        TInt(10),
        TAnewarray,
        TIdent("java/lang/Thread".to_string()),
        TAstore1,
        TGetstatic,
        TIdent("java/lang/System/out".to_string()),
        TIdent("Ljava/io/PrintStream;".to_string()),
        TAload1,
        TInstanceof,
        TIdent("[Ljava/lang/Thread;".to_string()),
        TInvokevirtual,
        TIdent("java/io/PrintStream/println".to_string()),
        TLeftParen,
        TIdent("I".to_string()),
        TRightParen,
        TIdent("V".to_string()),
        TReturn,
        TEnd,
        TEndMethod,
    ];

    let actual_tokens = lex(Path::new("doc/grammar/CreateArrayOfThreads.pho"))?;
    assert_eq!(expected_tokens, actual_tokens);

    Ok(())
}

#[test]
fn test_lex_swap_top_two_items() -> Result<(), Box<dyn Error>> {
    let expected_tokens = vec![
        TClass,
        TPublic,
        TIdent("SwapTopTwoItems".to_string()),
        TSuper,
        TIdent("java/lang/Object".to_string()),
        TMethod,
        TPublic,
        TIdent("<init>".to_string()),
        TLeftParen,
        TRightParen,
        TIdent("V".to_string()),
        TAload0,
        TInvokespecial,
        TIdent("java/lang/Object/<init>".to_string()),
        TLeftParen,
        TRightParen,
        TIdent("V".to_string()),
        TReturn,
        TEnd,
        TEndMethod,
        TMethod,
        TPublic,
        TStatic,
        TIdent("main".to_string()),
        TLeftParen,
        TIdent("[Ljava/lang/String;".to_string()),
        TRightParen,
        TIdent("V".to_string()),
        TLimit,
        TStack,
        TInt(3),
        TLimit,
        TLocals,
        TInt(1),
        TGetstatic,
        TIdent("java/lang/System/out".to_string()),
        TIdent("Ljava/io/PrintStream;".to_string()),
        TIconst1,
        TIconst2,
        TSwap,
        TPop,
        TInvokevirtual,
        TIdent("java/io/PrintStream/println".to_string()),
        TLeftParen,
        TIdent("I".to_string()),
        TRightParen,
        TIdent("V".to_string()),
        TReturn,
        TEnd,
        TEndMethod,
    ];

    let actual_tokens = lex(Path::new("doc/grammar/SwapTopTwoItems.pho"))?;
    assert_eq!(expected_tokens, actual_tokens);

    Ok(())
}

#[test]
fn test_lex_create_matrix_of_int() -> Result<(), Box<dyn Error>> {
    let expected_tokens = vec![
        TClass,
        TPublic,
        TIdent("CreateMatrixOfInt".to_string()),
        TSuper,
        TIdent("java/lang/Object".to_string()),
        TMethod,
        TPublic,
        TIdent("<init>".to_string()),
        TLeftParen,
        TRightParen,
        TIdent("V".to_string()),
        TAload0,
        TInvokespecial,
        TIdent("java/lang/Object/<init>".to_string()),
        TLeftParen,
        TRightParen,
        TIdent("V".to_string()),
        TReturn,
        TEnd,
        TEndMethod,
        TMethod,
        TPublic,
        TStatic,
        TIdent("main".to_string()),
        TLeftParen,
        TIdent("[Ljava/lang/String;".to_string()),
        TRightParen,
        TIdent("V".to_string()),
        TLimit,
        TStack,
        TInt(5),
        TLimit,
        TLocals,
        TInt(2),
        TBipush,
        TInt(2),
        TBipush,
        TInt(3),
        TBipush,
        TInt(7),
        TMultianewarray,
        TIdent("[[[I".to_string()),
        TInt(3),
        TAstore1,
        TGetstatic,
        TIdent("java/lang/System/out".to_string()),
        TIdent("Ljava/io/PrintStream;".to_string()),
        TAload1,
        TInstanceof,
        TIdent("[[[I".to_string()),
        TInvokevirtual,
        TIdent("java/io/PrintStream/println".to_string()),
        TLeftParen,
        TIdent("I".to_string()),
        TRightParen,
        TIdent("V".to_string()),
        TReturn,
        TEnd,
        TEndMethod,
    ];

    let actual_tokens = lex(Path::new("doc/grammar/CreateMatrixOfInt.pho"))?;
    assert_eq!(expected_tokens, actual_tokens);

    Ok(())
}

#[test]
fn test_lex_count() -> Result<(), Box<dyn Error>> {
    let expected_tokens = vec![
        TClass,
        TPublic,
        TIdent("Count".to_string()),
        TSuper,
        TIdent("java/lang/Object".to_string()),
        TMethod,
        TPublic,
        TIdent("<init>".to_string()),
        TLeftParen,
        TRightParen,
        TIdent("V".to_string()),
        TAload0,
        TInvokespecial,
        TIdent("java/lang/Object/<init>".to_string()),
        TLeftParen,
        TRightParen,
        TIdent("V".to_string()),
        TReturn,
        TEnd,
        TEndMethod,
        TMethod,
        TPublic,
        TStatic,
        TIdent("main".to_string()),
        TLeftParen,
        TIdent("[Ljava/lang/String;".to_string()),
        TRightParen,
        TIdent("V".to_string()),
        TLimit,
        TStack,
        TInt(3),
        TLimit,
        TLocals,
        TInt(4),
        TGetstatic,
        TIdent("java/lang/System/out".to_string()),
        TIdent("Ljava/io/PrintStream;".to_string()),
        TAstore1,
        TBipush,
        TInt(10),
        TIstore2,
        TIdent("Loop".to_string()),
        TColon,
        TBipush,
        TInt(10),
        TIload2,
        TIsub,
        TInvokestatic,
        TIdent("java/lang/String/valueOf".to_string()),
        TLeftParen,
        TIdent("I".to_string()),
        TRightParen,
        TIdent("Ljava/lang/String;".to_string()),
        TAstore3,
        TAload1,
        TAload3,
        TInvokevirtual,
        TIdent("java/io/PrintStream/println".to_string()),
        TLeftParen,
        TIdent("Ljava/lang/String;".to_string()),
        TRightParen,
        TIdent("V".to_string()),
        TIinc,
        TInt(2),
        TInt(-1),
        TIload2,
        TIfne,
        TIdent("Loop".to_string()),
        TReturn,
        TEnd,
        TEndMethod,
    ];

    let actual_tokens = lex(Path::new("doc/grammar/Count.pho"))?;
    assert_eq!(expected_tokens, actual_tokens);

    Ok(())
}

#[test]
fn test_lex_catcher() -> Result<(), Box<dyn Error>> {
    let expected_tokens = vec![
        TClass,
        TPublic,
        TIdent("Catcher".to_string()),
        TSuper,
        TIdent("java/lang/Object".to_string()),
        TMethod,
        TPublic,
        TIdent("<init>".to_string()),
        TLeftParen,
        TRightParen,
        TIdent("V".to_string()),
        TAload0,
        TInvokespecial,
        TIdent("java/lang/Object/<init>".to_string()),
        TLeftParen,
        TRightParen,
        TIdent("V".to_string()),
        TReturn,
        TEnd,
        TEndMethod,
        TMethod,
        TPublic,
        TStatic,
        TIdent("main".to_string()),
        TLeftParen,
        TIdent("[Ljava/lang/String;".to_string()),
        TRightParen,
        TIdent("V".to_string()),
        TLimit,
        TStack,
        TInt(3),
        TLimit,
        TLocals,
        TInt(3),
        TCatch,
        TIdent("java/lang/Exception".to_string()),
        TFrom,
        TIdent("Label1".to_string()),
        TTo,
        TIdent("Label2".to_string()),
        TUsing,
        TIdent("Handler".to_string()),
        TIdent("Label1".to_string()),
        TColon,
        TNew,
        TIdent("java/lang/Exception".to_string()),
        TDup,
        TInvokespecial,
        TIdent("java/lang/Exception/<init>".to_string()),
        TLeftParen,
        TRightParen,
        TIdent("V".to_string()),
        TAthrow,
        TIdent("Label2".to_string()),
        TColon,
        TIdent("Handler".to_string()),
        TColon,
        TPop,
        TGetstatic,
        TIdent("java/lang/System/out".to_string()),
        TIdent("Ljava/io/PrintStream;".to_string()),
        TLdc,
        TString("Exception Caught".to_string()),
        TInvokevirtual,
        TIdent("java/io/PrintStream/println".to_string()),
        TLeftParen,
        TIdent("Ljava/lang/String;".to_string()),
        TRightParen,
        TIdent("V".to_string()),
        TReturn,
        TEnd,
        TEndMethod,
    ];

    let actual_tokens = lex(Path::new("doc/grammar/Catcher.pho"))?;
    assert_eq!(expected_tokens, actual_tokens);

    Ok(())
}

#[test]
fn test_lex_anewarray() -> Result<(), Box<dyn Error>> {
    let expected_tokens = vec![
        TClass,
        TPublic,
        TIdent("Anewarray".to_string().to_string()),
        TSuper,
        TIdent("java/lang/Object".to_string().to_string()),
        TMethod,
        TPublic,
        TIdent("<init>".to_string().to_string()),
        TLeftParen,
        TRightParen,
        TIdent("V".to_string().to_string()),
        TAload0,
        TInvokespecial,
        TIdent("java/lang/Object/<init>".to_string().to_string()),
        TLeftParen,
        TRightParen,
        TIdent("V".to_string()),
        TReturn,
        TEnd,
        TEndMethod,
        TMethod,
        TPublic,
        TStatic,
        TIdent("main".to_string()),
        TLeftParen,
        TIdent("[Ljava/lang/String;".to_string()),
        TRightParen,
        TIdent("V".to_string()),
        TLimit,
        TStack,
        TInt(3),
        TLimit,
        TLocals,
        TInt(4),
        TBipush,
        TInt(10),
        TAnewarray,
        TIdent("java/lang/Thread".to_string()),
        TAstore1,
        TIconst2,
        TAnewarray,
        TIdent("[Ljava/lang/String;".to_string()),
        TAstore2,
        TAload2,
        TIconst0,
        TBipush,
        TInt(5),
        TAnewarray,
        TIdent("java/lang/String".to_string()),
        TAastore,
        TAload2,
        TIconst1,
        TBipush,
        TInt(5),
        TAnewarray,
        TIdent("java/lang/String".to_string()),
        TAastore,
        TReturn,
        TEnd,
        TEndMethod,
    ];

    let actual_tokens = lex(Path::new("doc/grammar/Anewarray.pho"))?;
    assert_eq!(expected_tokens, actual_tokens);

    Ok(())
}

#[test]
fn test_lex_args_to_main() -> Result<(), Box<dyn Error>> {
    let expected_tokens = vec![
        TClass,
        TPublic,
        TIdent("ArgsToMain".to_string()),
        TSuper,
        TIdent("java/lang/Object".to_string()),
        TMethod,
        TPublic,
        TIdent("<init>".to_string()),
        TLeftParen,
        TRightParen,
        TIdent("V".to_string()),
        TAload0,
        TInvokespecial,
        TIdent("java/lang/Object/<init>".to_string()),
        TLeftParen,
        TRightParen,
        TIdent("V".to_string()),
        TReturn,
        TEnd,
        TEndMethod,
        TMethod,
        TPublic,
        TStatic,
        TIdent("main".to_string()),
        TLeftParen,
        TIdent("[Ljava/lang/String;".to_string()),
        TRightParen,
        TIdent("V".to_string()),
        TLimit,
        TStack,
        TInt(3),
        TLimit,
        TLocals,
        TInt(1),
        TGetstatic,
        TIdent("java/lang/System/out".to_string()),
        TIdent("Ljava/io/PrintStream;".to_string()),
        TAload0,
        TArraylength,
        TInvokevirtual,
        TIdent("java/io/PrintStream/println".to_string()),
        TLeftParen,
        TIdent("I".to_string()),
        TRightParen,
        TIdent("V".to_string()),
        TReturn,
        TEnd,
        TEndMethod,
    ];

    let actual_tokens = lex(Path::new("doc/grammar/ArgsToMain.pho"))?;
    assert_eq!(expected_tokens, actual_tokens);

    Ok(())
}

#[test]
fn test_lex_count_jasmin2() -> Result<(), Box<dyn Error>> {
    let expected_tokens = vec![
        TClass,
        TPublic,
        TIdent("CountJasmin2".to_string()),
        TSuper,
        TIdent("java/lang/Object".to_string()),
        TMethod,
        TPublic,
        TIdent("<init>".to_string()),
        TLeftParen,
        TRightParen,
        TIdent("V".to_string()),
        TAload0,
        TInvokespecial,
        TIdent("java/lang/Object/<init>".to_string()),
        TLeftParen,
        TRightParen,
        TIdent("V".to_string()),
        TReturn,
        TEnd,
        TEndMethod,
        TMethod,
        TPublic,
        TStatic,
        TIdent("main".to_string()),
        TLeftParen,
        TIdent("[Ljava/lang/String;".to_string()),
        TRightParen,
        TIdent("V".to_string()),
        TLimit,
        TStack,
        TInt(3),
        TLimit,
        TLocals,
        TInt(4),
        TIconst0,
        TIstore1,
        TGetstatic,
        TIdent("java/lang/System/out".to_string()),
        TIdent("Ljava/io/PrintStream;".to_string()),
        TAstore2,
        TIdent("loop".to_string()),
        TColon,
        TAload2,
        TIload1,
        TInvokevirtual,
        TIdent("java/io/PrintStream/println".to_string()),
        TLeftParen,
        TIdent("I".to_string()),
        TRightParen,
        TIdent("V".to_string()),
        TIinc,
        TInt(1),
        TInt(1),
        TIload,
        TInt(1),
        TBipush,
        TInt(10),
        TIficmplt,
        TIdent("loop".to_string()),
        TReturn,
        TEnd,
        TEndMethod,
    ];

    let actual_tokens = lex(Path::new("doc/grammar/CountJasmin2.pho"))?;
    assert_eq!(expected_tokens, actual_tokens);

    Ok(())
}

#[test]
fn test_lex_add_nums_jasmin() -> Result<(), Box<dyn Error>> {
    let expected_tokens = vec![
        TClass,
        TPublic,
        TIdent("AddNumsJasmin".to_string()),
        TSuper,
        TIdent("java/lang/Object".to_string()),
        TMethod,
        TPublic,
        TIdent("<init>".to_string()),
        TLeftParen,
        TRightParen,
        TIdent("V".to_string()),
        TAload0,
        TInvokespecial,
        TIdent("java/lang/Object/<init>".to_string()),
        TLeftParen,
        TRightParen,
        TIdent("V".to_string()),
        TReturn,
        TEnd,
        TEndMethod,
        TMethod,
        TPrivate,
        TStatic,
        TIdent("addNums".to_string()),
        TLeftParen,
        TIdent("II".to_string()),
        TRightParen,
        TIdent("I".to_string()),
        TLimit,
        TStack,
        TInt(3),
        TLimit,
        TLocals,
        TInt(3),
        TIload0,
        TIload1,
        TIadd,
        TIreturn,
        TEnd,
        TEndMethod,
        TMethod,
        TPublic,
        TStatic,
        TIdent("main".to_string()),
        TLeftParen,
        TIdent("[Ljava/lang/String;".to_string()),
        TRightParen,
        TIdent("V".to_string()),
        TLimit,
        TStack,
        TInt(3),
        TLimit,
        TLocals,
        TInt(1),
        TGetstatic,
        TIdent("java/lang/System/out".to_string()),
        TIdent("Ljava/io/PrintStream;".to_string()),
        TIconst1,
        TBipush,
        TInt(99),
        TInvokestatic,
        TIdent("AddNumsJasmin/addNums".to_string()),
        TLeftParen,
        TIdent("II".to_string()),
        TRightParen,
        TIdent("I".to_string()),
        TInvokevirtual,
        TIdent("java/io/PrintStream/println".to_string()),
        TLeftParen,
        TIdent("I".to_string()),
        TRightParen,
        TIdent("V".to_string()),
        TReturn,
        TEnd,
        TEndMethod,
    ];

    let actual_tokens = lex(Path::new("doc/grammar/AddNumsJasmin.pho"))?;
    assert_eq!(expected_tokens, actual_tokens);

    Ok(())
}

#[test]
fn test_lex_stack_push_jasmin() -> Result<(), Box<dyn Error>> {
    let expected_tokens = vec![
        TClass,
        TPublic,
        TIdent("StackPushJasmin".to_string()),
        TSuper,
        TIdent("java/lang/Object".to_string()),
        TMethod,
        TPublic,
        TIdent("<init>".to_string()),
        TLeftParen,
        TRightParen,
        TIdent("V".to_string()),
        TAload0,
        TInvokespecial,
        TIdent("java/lang/Object/<init>".to_string()),
        TLeftParen,
        TRightParen,
        TIdent("V".to_string()),
        TReturn,
        TEnd,
        TEndMethod,
        TMethod,
        TPublic,
        TStatic,
        TIdent("main".to_string()),
        TLeftParen,
        TIdent("[Ljava/lang/String;".to_string()),
        TRightParen,
        TIdent("V".to_string()),
        TLimit,
        TStack,
        TInt(40),
        TLimit,
        TLocals,
        TInt(1),
        TIconstm1,
        TIconst0,
        TIconst1,
        TIconst2,
        TIconst3,
        TIconst4,
        TIconst5,
        TLconst0,
        TLconst1,
        TFconst0,
        TFconst1,
        TDconst0,
        TDconst1,
        TBipush,
        TInt(10),
        TSipush,
        TInt(1000),
        TLdc,
        TString("Hello, world".to_string()),
        TLdcw,
        TString("Hola, mundo".to_string()),
        TLdc2w,
        TInt(12345),
        TReturn,
        TEnd,
        TEndMethod,
    ];

    let actual_tokens = lex(Path::new("doc/grammar/StackPushJasmin.pho"))?;
    assert_eq!(expected_tokens, actual_tokens);

    Ok(())
}

#[test]
fn test_lex_factorial_goto() -> Result<(), Box<dyn Error>> {
    let expected_tokens = vec![
        TClass,
        TPublic,
        TIdent("FactorialGoto".to_string()),
        TSuper,
        TIdent("java/lang/Object".to_string()),
        TMethod,
        TPublic,
        TIdent("<init>".to_string()),
        TLeftParen,
        TRightParen,
        TIdent("V".to_string()),
        TAload0,
        TInvokespecial,
        TIdent("java/lang/Object/<init>".to_string()),
        TLeftParen,
        TRightParen,
        TIdent("V".to_string()),
        TReturn,
        TEnd,
        TEndMethod,
        TMethod,
        TPrivate,
        TStatic,
        TIdent("factorial".to_string()),
        TLeftParen,
        TIdent("I".to_string()),
        TRightParen,
        TIdent("I".to_string()),
        TLimit,
        TStack,
        TInt(3),
        TLimit,
        TLocals,
        TInt(3),
        TIconst1,
        TIstore1,
        TIconst2,
        TIstore2,
        TIdent("floop".to_string()),
        TColon,
        TIload2,
        TIload0,
        TIficmpgt,
        TIdent("back".to_string()),
        TIload1,
        TIload2,
        TImul,
        TIstore1,
        TIinc,
        TInt(2),
        TInt(1),
        TGoto,
        TIdent("floop".to_string()),
        TIdent("back".to_string()),
        TColon,
        TIload1,
        TIreturn,
        TEnd,
        TEndMethod,
        TMethod,
        TPublic,
        TStatic,
        TIdent("main".to_string()),
        TLeftParen,
        TIdent("[Ljava/lang/String;".to_string()),
        TRightParen,
        TIdent("V".to_string()),
        TLimit,
        TStack,
        TInt(2),
        TLimit,
        TLocals,
        TInt(1),
        TGetstatic,
        TIdent("java/lang/System/out".to_string()),
        TIdent("Ljava/io/PrintStream;".to_string()),
        TBipush,
        TInt(10),
        TInvokestatic,
        TIdent("FactorialGoto/factorial".to_string()),
        TLeftParen,
        TIdent("I".to_string()),
        TRightParen,
        TIdent("I".to_string()),
        TInvokevirtual,
        TIdent("java/io/PrintStream/println".to_string()),
        TLeftParen,
        TIdent("I".to_string()),
        TRightParen,
        TIdent("V".to_string()),
        TReturn,
        TEnd,
        TEndMethod,
    ];

    let actual_tokens = lex(Path::new("doc/grammar/FactorialGoto.pho"))?;
    assert_eq!(expected_tokens, actual_tokens);

    Ok(())
}

#[test]
fn test_lex_factorial_jasmin() -> Result<(), Box<dyn Error>> {
    let expected_tokens = vec![
        TClass,
        TPublic,
        TIdent("FactorialJasmin".to_string()),
        TSuper,
        TIdent("java/lang/Object".to_string()),
        TMethod,
        TPublic,
        TIdent("<init>".to_string()),
        TLeftParen,
        TRightParen,
        TIdent("V".to_string()),
        TAload0,
        TInvokespecial,
        TIdent("java/lang/Object/<init>".to_string()),
        TLeftParen,
        TRightParen,
        TIdent("V".to_string()),
        TReturn,
        TEnd,
        TEndMethod,
        TMethod,
        TPrivate,
        TStatic,
        TIdent("factorial".to_string()),
        TLeftParen,
        TIdent("I".to_string()),
        TRightParen,
        TIdent("I".to_string()),
        TLimit,
        TStack,
        TInt(3),
        TLimit,
        TLocals,
        TInt(3),
        TIconst1,
        TIstore1,
        TIconst2,
        TIstore2,
        TIdent("loop".to_string()),
        TColon,
        TIload2,
        TIload1,
        TImul,
        TIstore1,
        TIinc,
        TInt(2),
        TInt(1),
        TIload2,
        TIload0,
        TIficmple,
        TIdent("loop".to_string()),
        TIload1,
        TIreturn,
        TEnd,
        TEndMethod,
        TMethod,
        TPublic,
        TStatic,
        TIdent("main".to_string()),
        TLeftParen,
        TIdent("[Ljava/lang/String;".to_string()),
        TRightParen,
        TIdent("V".to_string()),
        TLimit,
        TStack,
        TInt(2),
        TLimit,
        TLocals,
        TInt(1),
        TGetstatic,
        TIdent("java/lang/System/out".to_string()),
        TIdent("Ljava/io/PrintStream;".to_string()),
        TBipush,
        TInt(10),
        TInvokestatic,
        TIdent("FactorialJasmin/factorial".to_string()),
        TLeftParen,
        TIdent("I".to_string()),
        TRightParen,
        TIdent("I".to_string()),
        TInvokevirtual,
        TIdent("java/io/PrintStream/println".to_string()),
        TLeftParen,
        TIdent("I".to_string()),
        TRightParen,
        TIdent("V".to_string()),
        TReturn,
        TEnd,
        TEndMethod,
    ];

    let actual_tokens = lex(Path::new("doc/grammar/FactorialJasmin.pho"))?;
    assert_eq!(expected_tokens, actual_tokens);

    Ok(())
}

#[test]
fn test_lex_check_array_type() -> Result<(), Box<dyn Error>> {
    let expected_tokens = vec![
        TClass,
        TPublic,
        TIdent("CheckArrayType".to_string()),
        TSuper,
        TIdent("java/lang/Object".to_string()),
        TMethod,
        TPublic,
        TIdent("<init>".to_string()),
        TLeftParen,
        TRightParen,
        TIdent("V".to_string()),
        TAload0,
        TInvokespecial,
        TIdent("java/lang/Object/<init>".to_string()),
        TLeftParen,
        TRightParen,
        TIdent("V".to_string()),
        TReturn,
        TEnd,
        TEndMethod,
        TMethod,
        TPublic,
        TStatic,
        TIdent("main".to_string()),
        TLeftParen,
        TIdent("[Ljava/lang/String;".to_string()),
        TRightParen,
        TIdent("V".to_string()),
        TLimit,
        TStack,
        TInt(2),
        TLimit,
        TLocals,
        TInt(3),
        TBipush,
        TInt(5),
        TNewarray,
        TIdent("int".to_string()),
        TAstore1,
        TGetstatic,
        TIdent("java/lang/System/out".to_string()),
        TIdent("Ljava/io/PrintStream;".to_string()),
        TAload1,
        TInstanceof,
        TIdent("[I".to_string()),
        TInvokevirtual,
        TIdent("java/io/PrintStream/println".to_string()),
        TLeftParen,
        TIdent("I".to_string()),
        TRightParen,
        TIdent("V".to_string()),
        TBipush,
        TInt(10),
        TNewarray,
        TIdent("char".to_string()),
        TAstore2,
        TGetstatic,
        TIdent("java/lang/System/out".to_string()),
        TIdent("Ljava/io/PrintStream;".to_string()),
        TAload2,
        TInstanceof,
        TIdent("[I".to_string()),
        TInvokevirtual,
        TIdent("java/io/PrintStream/println".to_string()),
        TLeftParen,
        TIdent("I".to_string()),
        TRightParen,
        TIdent("V".to_string()),
        TReturn,
        TEnd,
        TEndMethod,
    ];

    let actual_tokens = lex(Path::new("doc/grammar/CheckArrayType.pho"))?;
    assert_eq!(expected_tokens, actual_tokens);

    Ok(())
}

#[test]
fn test_lex_print_hello_10_times() -> Result<(), Box<dyn Error>> {
    let expected_tokens = vec![
        TClass,
        TPublic,
        TIdent("PrintHello10Times".to_string()),
        TSuper,
        TIdent("java/lang/Object".to_string()),
        TMethod,
        TPublic,
        TIdent("<init>".to_string()),
        TLeftParen,
        TRightParen,
        TIdent("V".to_string()),
        TAload0,
        TInvokespecial,
        TIdent("java/lang/Object/<init>".to_string()),
        TLeftParen,
        TRightParen,
        TIdent("V".to_string()),
        TReturn,
        TEnd,
        TEndMethod,
        TMethod,
        TPublic,
        TStatic,
        TIdent("main".to_string()),
        TLeftParen,
        TIdent("[Ljava/lang/String;".to_string()),
        TRightParen,
        TIdent("V".to_string()),
        TLimit,
        TStack,
        TInt(3),
        TLimit,
        TLocals,
        TInt(3),
        TIconst1,
        TIstore1,
        TGetstatic,
        TIdent("java/lang/System/out".to_string()),
        TIdent("Ljava/io/PrintStream;".to_string()),
        TAstore2,
        TIdent("loop".to_string()),
        TColon,
        TAload2,
        TIload1,
        TInvokevirtual,
        TIdent("java/io/PrintStream/print".to_string()),
        TLeftParen,
        TIdent("I".to_string()),
        TRightParen,
        TIdent("V".to_string()),
        TAload2,
        TLdc,
        TString(" - ".to_string()),
        TInvokevirtual,
        TIdent("java/io/PrintStream/print".to_string()),
        TLeftParen,
        TIdent("Ljava/lang/String;".to_string()),
        TRightParen,
        TIdent("V".to_string()),
        TAload2,
        TLdc,
        TString("Hello".to_string()),
        TInvokevirtual,
        TIdent("java/io/PrintStream/println".to_string()),
        TLeftParen,
        TIdent("Ljava/lang/String;".to_string()),
        TRightParen,
        TIdent("V".to_string()),
        TIinc,
        TInt(1),
        TInt(1),
        TIload1,
        TBipush,
        TInt(10),
        TIficmple,
        TIdent("loop".to_string()),
        TReturn,
        TEnd,
        TEndMethod,
    ];

    let actual_tokens = lex(Path::new("doc/grammar/PrintHello10Times.pho"))?;
    assert_eq!(expected_tokens, actual_tokens);

    Ok(())
}

#[test]
fn test_lex_add_nums() -> Result<(), Box<dyn Error>> {
    let expected_tokens = vec![
        TClass,
        TPublic,
        TIdent("AddNums".to_string()),
        TSuper,
        TIdent("java/lang/Object".to_string()),
        TMethod,
        TPublic,
        TIdent("<init>".to_string()),
        TLeftParen,
        TRightParen,
        TIdent("V".to_string()),
        TAload0,
        TInvokespecial,
        TIdent("java/lang/Object/<init>".to_string()),
        TLeftParen,
        TRightParen,
        TIdent("V".to_string()),
        TReturn,
        TEnd,
        TEndMethod,
        TMethod,
        TPublic,
        TStatic,
        TIdent("main".to_string()),
        TLeftParen,
        TIdent("[Ljava/lang/String;".to_string()),
        TRightParen,
        TIdent("V".to_string()),
        TLimit,
        TStack,
        TInt(5),
        TLimit,
        TLocals,
        TInt(8),
        TNew,
        TIdent("java/util/Scanner".to_string()),
        TDup,
        TGetstatic,
        TIdent("java/lang/System/in".to_string()),
        TIdent("Ljava/io/InputStream;".to_string()),
        TInvokespecial,
        TIdent("java/util/Scanner/<init>".to_string()),
        TLeftParen,
        TIdent("Ljava/io/InputStream;".to_string()),
        TRightParen,
        TIdent("V".to_string()),
        TAstore1,
        TJsr,
        TIdent("ReadNum".to_string()),
        TIstore3,
        TJsr,
        TIdent("ReadNum".to_string()),
        TIstore,
        TInt(4),
        TIload3,
        TIload,
        TInt(4),
        TJsr,
        TIdent("AddNum".to_string()),
        TIstore,
        TInt(5),
        TIload,
        TInt(5),
        TJsr,
        TIdent("PrintSum".to_string()),
        TReturn,
        TIdent("PrintSum".to_string()),
        TColon,
        TAstore,
        TInt(7),
        TGetstatic,
        TIdent("java/lang/System/out".to_string()),
        TIdent("Ljava/io/PrintStream;".to_string()),
        TSwap,
        TInvokestatic,
        TIdent("java/lang/String/valueOf".to_string()),
        TLeftParen,
        TIdent("I".to_string()),
        TRightParen,
        TIdent("Ljava/lang/String;".to_string()),
        TInvokevirtual,
        TIdent("java/io/PrintStream/println".to_string()),
        TLeftParen,
        TIdent("Ljava/lang/String;".to_string()),
        TRightParen,
        TIdent("V".to_string()),
        TRet,
        TInt(7),
        TIdent("AddNum".to_string()),
        TColon,
        TAstore,
        TInt(6),
        TIadd,
        TRet,
        TInt(6),
        TIdent("ReadNum".to_string()),
        TColon,
        TAstore2,
        TAload1,
        TInvokevirtual,
        TIdent("java/util/Scanner/nextInt".to_string()),
        TLeftParen,
        TRightParen,
        TIdent("I".to_string()),
        TRet,
        TInt(2),
        TEnd,
        TEndMethod,
    ];

    let actual_tokens = lex(Path::new("doc/grammar/AddNums.pho"))?;
    assert_eq!(expected_tokens, actual_tokens);

    Ok(())
}

#[test]
fn test_lex_count_jasmin() -> Result<(), Box<dyn Error>> {
    let expected_tokens = vec![
        TClass,
        TPublic,
        TIdent("CountJasmin".to_string()),
        TSuper,
        TIdent("java/lang/Object".to_string()),
        TMethod,
        TPublic,
        TIdent("<init>".to_string()),
        TLeftParen,
        TRightParen,
        TIdent("V".to_string()),
        TAload0,
        TInvokespecial,
        TIdent("java/lang/Object/<init>".to_string()),
        TLeftParen,
        TRightParen,
        TIdent("V".to_string()),
        TReturn,
        TEnd,
        TEndMethod,
        TMethod,
        TPublic,
        TStatic,
        TIdent("main".to_string()),
        TLeftParen,
        TIdent("[Ljava/lang/String;".to_string()),
        TRightParen,
        TIdent("V".to_string()),
        TLimit,
        TStack,
        TInt(3),
        TLimit,
        TLocals,
        TInt(4),
        TGetstatic,
        TIdent("java/lang/System/out".to_string()),
        TIdent("Ljava/io/PrintStream;".to_string()),
        TAstore1,
        TBipush,
        TInt(10),
        TIstore2,
        TIdent("loop".to_string()),
        TColon,
        TBipush,
        TInt(10),
        TIload2,
        TIsub,
        TInvokestatic,
        TIdent("java/lang/String/valueOf".to_string()),
        TLeftParen,
        TIdent("I".to_string()),
        TRightParen,
        TIdent("Ljava/lang/String;".to_string()),
        TAstore3,
        TAload1,
        TAload3,
        TInvokevirtual,
        TIdent("java/io/PrintStream/println".to_string()),
        TLeftParen,
        TIdent("Ljava/lang/String;".to_string()),
        TRightParen,
        TIdent("V".to_string()),
        TIinc,
        TInt(2),
        TInt(-1),
        TIload2,
        TIfne,
        TIdent("loop".to_string()),
        TReturn,
        TEnd,
        TEndMethod,
    ];

    let actual_tokens = lex(Path::new("doc/grammar/CountJasmin.pho"))?;
    assert_eq!(expected_tokens, actual_tokens);

    Ok(())
}

#[test]
fn test_lex_string_buffer_demo() -> Result<(), Box<dyn Error>> {
    let expected_tokens = vec![
        TClass,
        TPublic,
        TIdent("StringBufferDemo".to_string()),
        TSuper,
        TIdent("java/lang/Object".to_string()),
        TMethod,
        TPublic,
        TIdent("<init>".to_string()),
        TLeftParen,
        TRightParen,
        TIdent("V".to_string()),
        TAload0,
        TInvokespecial,
        TIdent("java/lang/Object/<init>".to_string()),
        TLeftParen,
        TRightParen,
        TIdent("V".to_string()),
        TReturn,
        TEnd,
        TEndMethod,
        TMethod,
        TPrivate,
        TStatic,
        TIdent("sbDemo".to_string()),
        TLeftParen,
        TIdent("Ljava/lang/Object;".to_string()),
        TRightParen,
        TIdent("V".to_string()),
        TLimit,
        TStack,
        TInt(2),
        TLimit,
        TLocals,
        TInt(2),
        TAload0,
        TCheckcast,
        TIdent("java/lang/StringBuffer".to_string()),
        TLdc,
        TString("Hello, mundo!".to_string()),
        TInvokevirtual,
        TIdent("java/lang/StringBuffer/append".to_string()),
        TLeftParen,
        TIdent("Ljava/lang/String;".to_string()),
        TRightParen,
        TIdent("Ljava/lang/StringBuffer;".to_string()),
        TReturn,
        TEnd,
        TEndMethod,
        TMethod,
        TPublic,
        TStatic,
        TIdent("main".to_string()),
        TLeftParen,
        TIdent("[Ljava/lang/String;".to_string()),
        TRightParen,
        TIdent("V".to_string()),
        TLimit,
        TStack,
        TInt(3),
        TLimit,
        TLocals,
        TInt(2),
        TNew,
        TIdent("java/lang/StringBuffer".to_string()),
        TDup,
        TInvokespecial,
        TIdent("java/lang/StringBuffer/<init>".to_string()),
        TLeftParen,
        TRightParen,
        TIdent("V".to_string()),
        TAstore1,
        TAload1,
        TInvokestatic,
        TIdent("StringBufferDemo/sbDemo".to_string()),
        TLeftParen,
        TIdent("Ljava/lang/Object;".to_string()),
        TRightParen,
        TIdent("V".to_string()),
        TGetstatic,
        TIdent("java/lang/System/out".to_string()),
        TIdent("Ljava/io/PrintStream;".to_string()),
        TAload1,
        TInvokevirtual,
        TIdent("java/lang/StringBuffer/toString".to_string()),
        TLeftParen,
        TRightParen,
        TIdent("Ljava/lang/String;".to_string()),
        TInvokevirtual,
        TIdent("java/io/PrintStream/println".to_string()),
        TLeftParen,
        TIdent("Ljava/lang/String;".to_string()),
        TRightParen,
        TIdent("V".to_string()),
        TReturn,
        TEnd,
        TEndMethod,
    ];

    let actual_tokens = lex(Path::new("doc/grammar/StringBufferDemo.pho"))?;
    assert_eq!(expected_tokens, actual_tokens);

    Ok(())
}

#[test]
fn test_lex_array_demo() -> Result<(), Box<dyn Error>> {
    let expected_tokens = vec![
        TClass,
        TPublic,
        TIdent("ArrayDemo".to_string()),
        TSuper,
        TIdent("java/lang/Object".to_string()),
        TMethod,
        TPublic,
        TIdent("<init>".to_string()),
        TLeftParen,
        TRightParen,
        TIdent("V".to_string()),
        TAload0,
        TInvokespecial,
        TIdent("java/lang/Object/<init>".to_string()),
        TLeftParen,
        TRightParen,
        TIdent("V".to_string()),
        TReturn,
        TEnd,
        TEndMethod,
        TMethod,
        TPrivate,
        TStatic,
        TIdent("setArr".to_string()),
        TLeftParen,
        TIdent("[III".to_string()),
        TRightParen,
        TIdent("V".to_string()),
        TLimit,
        TStack,
        TInt(4),
        TLimit,
        TLocals,
        TInt(4),
        TAload0,
        TIload1,
        TIload2,
        TIastore,
        TReturn,
        TEnd,
        TEndMethod,
        TMethod,
        TPrivate,
        TStatic,
        TIdent("printArr".to_string()),
        TLeftParen,
        TIdent("[II".to_string()),
        TRightParen,
        TIdent("V".to_string()),
        TLimit,
        TStack,
        TInt(4),
        TLimit,
        TLocals,
        TInt(2),
        TGetstatic,
        TIdent("java/lang/System/out".to_string()),
        TIdent("Ljava/io/PrintStream;".to_string()),
        TAload0,
        TIload1,
        TIaload,
        TInvokevirtual,
        TIdent("java/io/PrintStream/println".to_string()),
        TLeftParen,
        TIdent("I".to_string()),
        TRightParen,
        TIdent("V".to_string()),
        TReturn,
        TEnd,
        TEndMethod,
        TMethod,
        TPublic,
        TStatic,
        TIdent("main".to_string()),
        TLeftParen,
        TIdent("[Ljava/lang/String;".to_string()),
        TRightParen,
        TIdent("V".to_string()),
        TLimit,
        TStack,
        TInt(3),
        TLimit,
        TLocals,
        TInt(2),
        TBipush,
        TInt(5),
        TNewarray,
        TIdent("int".to_string()),
        TAstore1,
        TGetstatic,
        TIdent("java/lang/System/out".to_string()),
        TIdent("Ljava/io/PrintStream;".to_string()),
        TAload1,
        TBipush,
        TInt(4),
        TIaload,
        TInvokevirtual,
        TIdent("java/io/PrintStream/println".to_string()),
        TLeftParen,
        TIdent("I".to_string()),
        TRightParen,
        TIdent("V".to_string()),
        TAload1,
        TBipush,
        TInt(0),
        TBipush,
        TInt(1),
        TInvokestatic,
        TIdent("ArrayDemo/setArr".to_string()),
        TLeftParen,
        TIdent("[III".to_string()),
        TRightParen,
        TIdent("V".to_string()),
        TAload1,
        TBipush,
        TInt(1),
        TBipush,
        TInt(2),
        TIastore,
        TAload1,
        TBipush,
        TInt(2),
        TBipush,
        TInt(3),
        TIastore,
        TAload1,
        TBipush,
        TInt(3),
        TBipush,
        TInt(4),
        TIastore,
        TAload1,
        TBipush,
        TInt(4),
        TBipush,
        TInt(5),
        TIastore,
        TAload1,
        TBipush,
        TInt(0),
        TInvokestatic,
        TIdent("ArrayDemo/printArr".to_string()),
        TLeftParen,
        TIdent("[II".to_string()),
        TRightParen,
        TIdent("V".to_string()),
        TGetstatic,
        TIdent("java/lang/System/out".to_string()),
        TIdent("Ljava/io/PrintStream;".to_string()),
        TAload1,
        TBipush,
        TInt(1),
        TIaload,
        TInvokevirtual,
        TIdent("java/io/PrintStream/println".to_string()),
        TLeftParen,
        TIdent("I".to_string()),
        TRightParen,
        TIdent("V".to_string()),
        TGetstatic,
        TIdent("java/lang/System/out".to_string()),
        TIdent("Ljava/io/PrintStream;".to_string()),
        TAload1,
        TBipush,
        TInt(2),
        TIaload,
        TInvokevirtual,
        TIdent("java/io/PrintStream/println".to_string()),
        TLeftParen,
        TIdent("I".to_string()),
        TRightParen,
        TIdent("V".to_string()),
        TGetstatic,
        TIdent("java/lang/System/out".to_string()),
        TIdent("Ljava/io/PrintStream;".to_string()),
        TAload1,
        TBipush,
        TInt(3),
        TIaload,
        TInvokevirtual,
        TIdent("java/io/PrintStream/println".to_string()),
        TLeftParen,
        TIdent("I".to_string()),
        TRightParen,
        TIdent("V".to_string()),
        TGetstatic,
        TIdent("java/lang/System/out".to_string()),
        TIdent("Ljava/io/PrintStream;".to_string()),
        TAload1,
        TBipush,
        TInt(4),
        TIaload,
        TInvokevirtual,
        TIdent("java/io/PrintStream/println".to_string()),
        TLeftParen,
        TIdent("I".to_string()),
        TRightParen,
        TIdent("V".to_string()),
        TReturn,
        TEnd,
        TEndMethod,
    ];

    let actual_tokens = lex(Path::new("doc/grammar/ArrayDemo.pho"))?;
    assert_eq!(expected_tokens, actual_tokens);

    Ok(())
}

#[test]
fn test_lex_all_in_one() -> Result<(), Box<dyn Error>> {
    let expected_tokens = vec![
        TSource,
        TIdent("AllInOne.pho".to_string()),
        TClass,
        TPublic,
        TIdent("AllInOne".to_string()),
        TSuper,
        TIdent("java/lang/Thread".to_string()),
        TField,
        TPrivate,
        TIdent("x".to_string()),
        TIdent("I".to_string()),
        TField,
        TPrivate,
        TIdent("y".to_string()),
        TIdent("D".to_string()),
        TAssign,
        TFloat(1.2345),
        TField,
        TPublic,
        TIdent("z".to_string()),
        TIdent("I".to_string()),
        TAssign,
        TInt(12345),
        TField,
        TPublic,
        TStatic,
        TFinal,
        TIdent("PREFIX".to_string()),
        TIdent("Ljava/lang/String;".to_string()),
        TAssign,
        TString("FooBar".to_string()),
        TMethod,
        TPublic,
        TIdent("<init>".to_string()),
        TLeftParen,
        TRightParen,
        TIdent("V".to_string()),
        TAload0,
        TInvokespecial,
        TIdent("java/lang/Thread/<init>".to_string()),
        TLeftParen,
        TRightParen,
        TIdent("V".to_string()),
        TReturn,
        TEnd,
        TEndMethod,
        TMethod,
        TPrivate,
        TStatic,
        TIdent("exceptionsDemo".to_string()),
        TLeftParen,
        TRightParen,
        TIdent("V".to_string()),
        TLimit,
        TStack,
        TInt(3),
        TLimit,
        TLocals,
        TInt(1),
        TCatch,
        TIdent("java/lang/Exception".to_string()),
        TFrom,
        TIdent("Label1".to_string()),
        TTo,
        TIdent("Label2".to_string()),
        TUsing,
        TIdent("Handler".to_string()),
        TIdent("Label1".to_string()),
        TColon,
        TNew,
        TIdent("java/lang/Exception".to_string()),
        TDup,
        TInvokespecial,
        TIdent("java/lang/Exception/<init>".to_string()),
        TLeftParen,
        TRightParen,
        TIdent("V".to_string()),
        TAthrow,
        TIdent("Label2".to_string()),
        TColon,
        TIdent("Handler".to_string()),
        TColon,
        TPop,
        TGetstatic,
        TIdent("java/lang/System/out".to_string()),
        TIdent("Ljava/io/PrintStream;".to_string()),
        TLdc,
        TString("Exception caught".to_string()),
        TInvokevirtual,
        TIdent("java/io/PrintStream/println".to_string()),
        TLeftParen,
        TIdent("Ljava/lang/String;".to_string()),
        TRightParen,
        TIdent("V".to_string()),
        TReturn,
        TEnd,
        TEndMethod,
        TMethod,
        TPrivate,
        TStatic,
        TIdent("finallyDemo".to_string()),
        TLeftParen,
        TRightParen,
        TIdent("V".to_string()),
        TLimit,
        TStack,
        TInt(3),
        TLimit,
        TLocals,
        TInt(4),
        TCatch,
        TIdent("java/io/FileNotFoundException".to_string()),
        TFrom,
        TIdent("Start".to_string()),
        TTo,
        TIdent("End1".to_string()),
        TUsing,
        TIdent("NotFound".to_string()),
        TCatch,
        TIdent("java/io/IOException".to_string()),
        TFrom,
        TIdent("Start".to_string()),
        TTo,
        TIdent("End2".to_string()),
        TUsing,
        TIdent("IOE".to_string()),
        TCatch,
        TIdent("all".to_string()),
        TFrom,
        TIdent("Start".to_string()),
        TTo,
        TIdent("Done".to_string()),
        TUsing,
        TIdent("Other_Exception".to_string()),
        TIdent("Start".to_string()),
        TColon,
        TNew,
        TIdent("java/io/FileInputStream".to_string()),
        TDup,
        TLdc,
        TString("myfile".to_string()),
        TInvokespecial,
        TIdent("java/io/FileInputStream/<init>".to_string()),
        TLeftParen,
        TIdent("Ljava/lang/String;".to_string()),
        TRightParen,
        TIdent("V".to_string()),
        TAstore1,
        TIdent("End1".to_string()),
        TColon,
        TGoto,
        TIdent("Done".to_string()),
        TIdent("NotFound".to_string()),
        TColon,
        TPop,
        TGetstatic,
        TIdent("java/lang/System/out".to_string()),
        TIdent("Ljava/io/PrintStream;".to_string()),
        TLdc,
        TString("No such file".to_string()),
        TInvokevirtual,
        TIdent("java/io/PrintStream/println".to_string()),
        TLeftParen,
        TIdent("Ljava/lang/String;".to_string()),
        TRightParen,
        TIdent("V".to_string()),
        TGoto,
        TIdent("Done".to_string()),
        TIdent("IOE".to_string()),
        TColon,
        TPop,
        TGetstatic,
        TIdent("java/lang/System/out".to_string()),
        TIdent("Ljava/io/PrintStream;".to_string()),
        TLdc,
        TString("IO Exception occurred".to_string()),
        TInvokevirtual,
        TIdent("java/io/PrintStream/println".to_string()),
        TLeftParen,
        TIdent("Ljava/lang/String;".to_string()),
        TRightParen,
        TIdent("V".to_string()),
        TGoto,
        TIdent("Done".to_string()),
        TIdent("End2".to_string()),
        TColon,
        TIdent("Done".to_string()),
        TColon,
        TJsr,
        TIdent("FinalSub".to_string()),
        TReturn,
        TIdent("Other_Exception".to_string()),
        TColon,
        TAstore2,
        TJsr,
        TIdent("FinalSub".to_string()),
        TAload2,
        TAthrow,
        TIdent("FinalSub".to_string()),
        TColon,
        TAstore3,
        TGetstatic,
        TIdent("java/lang/System/out".to_string()),
        TIdent("Ljava/io/PrintStream;".to_string()),
        TLdc,
        TString("Done".to_string()),
        TInvokevirtual,
        TIdent("java/io/PrintStream/println".to_string()),
        TLeftParen,
        TIdent("Ljava/lang/String;".to_string()),
        TRightParen,
        TIdent("V".to_string()),
        TRet,
        TInt(3),
        TEnd,
        TEndMethod,
        TMethod,
        TSynchronized,
        TIdent("synchronizedMethoDemo".to_string()),
        TLeftParen,
        TRightParen,
        TIdent("V".to_string()),
        TLimit,
        TStack,
        TInt(1),
        TLimit,
        TLocals,
        TInt(1),
        TReturn,
        TEnd,
        TEndMethod,
        TMethod,
        TPrivate,
        TIdent("monitoDemo".to_string()),
        TLeftParen,
        TIdent("Ljava/lang/Object;".to_string()),
        TRightParen,
        TIdent("V".to_string()),
        TLimit,
        TStack,
        TInt(2),
        TLimit,
        TLocals,
        TInt(2),
        TAload1,
        TMonitorenter,
        TAload1,
        TMonitorexit,
        TReturn,
        TEnd,
        TEndMethod,
        TMethod,
        TPrivate,
        TIdent("checkCastDemo".to_string()),
        TLeftParen,
        TRightParen,
        TIdent("V".to_string()),
        TLimit,
        TStack,
        TInt(2),
        TLimit,
        TLocals,
        TInt(2),
        TAload0,
        TCheckcast,
        TIdent("java/lang/Object".to_string()),
        TReturn,
        TEnd,
        TEndMethod,
        TMethod,
        TPrivate,
        TIdent("instanceofDemo".to_string()),
        TLeftParen,
        TRightParen,
        TIdent("V".to_string()),
        TLimit,
        TStack,
        TInt(2),
        TLimit,
        TLocals,
        TInt(2),
        TAload0,
        TInstanceof,
        TIdent("java/lang/Thread".to_string()),
        TGetstatic,
        TIdent("java/lang/System/out".to_string()),
        TIdent("Ljava/io/PrintStream;".to_string()),
        TSwap,
        TInvokestatic,
        TIdent("java/lang/String/valueOf".to_string()),
        TLeftParen,
        TIdent("I".to_string()),
        TRightParen,
        TIdent("Ljava/lang/String;".to_string()),
        TInvokevirtual,
        TIdent("java/io/PrintStream/println".to_string()),
        TLeftParen,
        TIdent("Ljava/lang/String;".to_string()),
        TRightParen,
        TIdent("V".to_string()),
        TReturn,
        TEnd,
        TEndMethod,
        TMethod,
        TPrivate,
        TStatic,
        TIdent("subroutinesDemo".to_string()),
        TLeftParen,
        TRightParen,
        TIdent("V".to_string()),
        TLimit,
        TStack,
        TInt(2),
        TLimit,
        TLocals,
        TInt(2),
        TLdc,
        TString("Hello".to_string()),
        TJsr,
        TIdent("PrintString".to_string()),
        TLdc,
        TString(", world".to_string()),
        TJsr,
        TIdent("PrintString".to_string()),
        TReturn,
        TIdent("PrintString".to_string()),
        TColon,
        TAstore1,
        TGetstatic,
        TIdent("java/lang/System/out".to_string()),
        TIdent("Ljava/io/PrintStream;".to_string()),
        TSwap,
        TInvokevirtual,
        TIdent("java/io/PrintStream/println".to_string()),
        TLeftParen,
        TIdent("Ljava/lang/String;".to_string()),
        TRightParen,
        TIdent("V".to_string()),
        TRet,
        TInt(1),
        TEnd,
        TEndMethod,
        TMethod,
        TPrivate,
        TStatic,
        TIdent("lookupswitchDemo".to_string()),
        TLeftParen,
        TRightParen,
        TIdent("I".to_string()),
        TLimit,
        TStack,
        TInt(2),
        TLimit,
        TLocals,
        TInt(2),
        TBipush,
        TInt(10),
        TIstore1,
        TIload1,
        TLookupswitch,
        TInt(1),
        TColon,
        TIdent("R1".to_string()),
        TInt(10),
        TColon,
        TIdent("R2".to_string()),
        TInt(100),
        TColon,
        TIdent("R3".to_string()),
        TDefault,
        TColon,
        TIdent("R4".to_string()),
        TIdent("R1".to_string()),
        TColon,
        TIconst1,
        TIreturn,
        TIdent("R2".to_string()),
        TColon,
        TIconst2,
        TIreturn,
        TIdent("R3".to_string()),
        TColon,
        TIconst3,
        TIreturn,
        TIdent("R4".to_string()),
        TColon,
        TIconst0,
        TIreturn,
        TEnd,
        TEndMethod,
        TMethod,
        TPrivate,
        TStatic,
        TIdent("tableswitchDemo".to_string()),
        TLeftParen,
        TRightParen,
        TIdent("I".to_string()),
        TLimit,
        TStack,
        TInt(2),
        TLimit,
        TLocals,
        TInt(3),
        TIconst3,
        TIstore1,
        TIload1,
        TTableswitch,
        TInt(1),
        TInt(3),
        TIdent("R1".to_string()),
        TIdent("R2".to_string()),
        TIdent("R3".to_string()),
        TDefault,
        TColon,
        TIdent("R4".to_string()),
        TIdent("R1".to_string()),
        TColon,
        TIconst1,
        TIreturn,
        TIdent("R2".to_string()),
        TColon,
        TIconst2,
        TIreturn,
        TIdent("R3".to_string()),
        TColon,
        TIconst3,
        TIreturn,
        TIdent("R4".to_string()),
        TColon,
        TIconst0,
        TIreturn,
        TEnd,
        TEndMethod,
        TMethod,
        TPrivate,
        TStatic,
        TIdent("varDemo".to_string()),
        TLeftParen,
        TRightParen,
        TIdent("V".to_string()),
        TLimit,
        TLocals,
        TInt(1),
        TVar,
        TInt(0),
        TIs,
        TIdent("Count".to_string()),
        TIdent("I".to_string()),
        TFrom,
        TIdent("Label1".to_string()),
        TTo,
        TIdent("Label2".to_string()),
        TIdent("Label1".to_string()),
        TColon,
        TBipush,
        TInt(10),
        TIstore0,
        TIdent("Label2".to_string()),
        TColon,
        TReturn,
        TEnd,
        TEndMethod,
        TMethod,
        TPublic,
        TStatic,
        TIdent("main".to_string()),
        TLeftParen,
        TIdent("[Ljava/lang/String;".to_string()),
        TRightParen,
        TIdent("V".to_string()),
        TLimit,
        TStack,
        TInt(2),
        TLimit,
        TLocals,
        TInt(3),
        TThrows,
        TIdent("java/lang/RuntimeException".to_string()),
        TGetstatic,
        TIdent("java/lang/System/out".to_string()),
        TIdent("Ljava/io/PrintStream;".to_string()),
        TLdc,
        TString("Hello, world".to_string()),
        TInvokevirtual,
        TIdent("java/io/PrintStream/println".to_string()),
        TLeftParen,
        TIdent("Ljava/lang/String;".to_string()),
        TRightParen,
        TIdent("V".to_string()),
        TInvokestatic,
        TIdent("AllInOne/exceptionsDemo".to_string()),
        TLeftParen,
        TRightParen,
        TIdent("V".to_string()),
        TInvokestatic,
        TIdent("AllInOne/finallyDemo".to_string()),
        TLeftParen,
        TRightParen,
        TIdent("V".to_string()),
        TNew,
        TIdent("AllInOne".to_string()),
        TDup,
        TInvokespecial,
        TIdent("AllInOne/<init>".to_string()),
        TLeftParen,
        TRightParen,
        TIdent("V".to_string()),
        TAstore1,
        TAload1,
        TInvokevirtual,
        TIdent("AllInOne/instanceofDemo".to_string()),
        TLeftParen,
        TRightParen,
        TIdent("V".to_string()),
        TAload1,
        TInvokevirtual,
        TIdent("AllInOne/checkCastDemo".to_string()),
        TLeftParen,
        TRightParen,
        TIdent("V".to_string()),
        TInvokestatic,
        TIdent("AllInOne/subroutinesDemo".to_string()),
        TLeftParen,
        TRightParen,
        TIdent("V".to_string()),
        TInvokestatic,
        TIdent("AllInOne/lookupswitchDemo".to_string()),
        TLeftParen,
        TRightParen,
        TIdent("I".to_string()),
        TJsr,
        TIdent("PrintInt".to_string()),
        TInvokestatic,
        TIdent("AllInOne/tableswitchDemo".to_string()),
        TLeftParen,
        TRightParen,
        TIdent("I".to_string()),
        TJsr,
        TIdent("PrintInt".to_string()),
        TReturn,
        TIdent("PrintInt".to_string()),
        TColon,
        TAstore2,
        TGetstatic,
        TIdent("java/lang/System/out".to_string()),
        TIdent("Ljava/io/PrintStream;".to_string()),
        TSwap,
        TInvokestatic,
        TIdent("java/lang/String/valueOf".to_string()),
        TLeftParen,
        TIdent("I".to_string()),
        TRightParen,
        TIdent("Ljava/lang/String;".to_string()),
        TInvokevirtual,
        TIdent("java/io/PrintStream/println".to_string()),
        TLeftParen,
        TIdent("Ljava/lang/String;".to_string()),
        TRightParen,
        TIdent("V".to_string()),
        TRet,
        TInt(2),
        TEnd,
        TEndMethod,
    ];

    let actual_tokens = lex(Path::new("doc/grammar/AllInOne.pho"))?;
    assert_eq!(expected_tokens, actual_tokens);

    Ok(())
}
